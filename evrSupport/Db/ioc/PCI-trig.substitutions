#=============================================================================
#
# Abs:  Trigger records for PCI-EVR-230
#
# Name: PCI-trig.substitutions
#
# Associated Display: evnt_trig_PCI.edl
#
# Rem:  Instantiate one line for every trigger channel including ones not used.
# There should be 4 lines for a PCI EVR without a transition module for the front panel triggers.
#
# Macros:
#   SYS     SYS code for the system where this EVR is deployed:
#       SYS0 for LCLS
#       SYS1 for FACET
#       SYS2 for LCLS II
#	IOC	Name of IOC that contains the EVR, not including the 3rd colon.
#	LOCA	Location of the EVR that triggers the device.  It is the second part of the
#		EVR:<loca>:<unit>:CTRL record instantiated with EvrPmc.db.
#	UNIT	Unit number of the EVR instantiated in EvrPmc.db. Format is xxyy,
#       where xx = subsystem and yy is 01, 02, etc.
#
# Optional Macros:
#	DEV	Leave undefined for general purpose triggers.
#       If this is undefined, trigger PV names will start with "TRIG:<loca>:<unit>:".
#       Define this to give trigger PVs the names "$(DEV):0" through "$(DEV):15",
#       that is, replace "TRIG:<loca>:<unit>:" with "$(DEV):".
#   DEVn where n is 0-15. Use these to individually set channel PV names. Give the
#       name of the device being triggered up to and including the 3rd colon.
#		Add a qualifying name after the 3rd colon, if necessary, to keep the name unique.
#		If the trigger channel is not used, use "TRIG:<loca>:<unit>:"
#		where <loca> is the location of your IOC and <unit> is xxyy, where xx = subsystem
#		and yy is 01, 02, etc.
#
#-----------------------------------------------------------------------------
# Mod:
#       19-Jan-2012, T. Lahey          (LAHEY):
#          Add EVR and FILE tags to generate event edl files
#          & change DESC values to production event file evnt_wireScan.edl
#==============================================================================
#
# ======================================================================
# The four comments below are used to generate EDM displays for timing
# ======================================================================
#EVR $(EVR)
#FILE evnt_trig_PMC
#BODY_TEXT PMC EVR front panel
#CONTROLPV1 SIOC:$(SYS):AL00:MODE
#CONTROLPV2 SIOC:$(SYS):AL00:TOD
# ======================================================================

file evrDevTrig.db
{
#           Device	   , Description    ,polarity,width,delay,event , EVR  , EVR,  IOC
#			                                         code   ,location,unit
pattern { DEV                                         ,       CH, DESC          , POL, WID, DES,  LOCA ,   UNIT     , IOC     ,  DRVL  ,  DRVH   , TCTL     , TPOL    , TWID    , TDES    , CTL, TOUT    , SYS  }
	  { "\$(DEV$(CH)=\$(DEV=TRIG:\$(LOCA):\$(UNIT)):$(CH)):",  0, "Channel $(CH)", 0 , 100, 10 , '$(LOCA)','$(UNIT)', '$(IOC)', -2.8E06, 2.8E06  , DG$(CH)E , DG$(CH)P, DG$(CH)W, DG$(CH)D, 1  , OUT$(CH), '$(SYS)' }
	  { "\$(DEV$(CH)=\$(DEV=TRIG:\$(LOCA):\$(UNIT)):$(CH)):",  1, "Channel $(CH)", 0 , 100, 10 , '$(LOCA)','$(UNIT)', '$(IOC)', -2.8E06, 2.8E06  , DG$(CH)E , DG$(CH)P, DG$(CH)W, DG$(CH)D, 1  , OUT$(CH), '$(SYS)' }
	  { "\$(DEV$(CH)=\$(DEV=TRIG:\$(LOCA):\$(UNIT)):$(CH)):",  2, "Channel $(CH)", 0 , 100, 10 , '$(LOCA)','$(UNIT)', '$(IOC)', -2.8E06, 2.8E06  , DG$(CH)E , DG$(CH)P, DG$(CH)W, DG$(CH)D, 1  , OUT$(CH), '$(SYS)' }
	  { "\$(DEV$(CH)=\$(DEV=TRIG:\$(LOCA):\$(UNIT)):$(CH)):",  3, "Channel $(CH)", 0 , 100, 10 , '$(LOCA)','$(UNIT)', '$(IOC)', -2.8E06, 2.8E06  , DG$(CH)E , DG$(CH)P, DG$(CH)W, DG$(CH)D, 1  , OUT$(CH), '$(SYS)' }
	  { "\$(DEV$(CH)=\$(DEV=TRIG:\$(LOCA):\$(UNIT)):$(CH)):",  4, "Channel $(CH)", 0 , 100, 10 , '$(LOCA)','$(UNIT)', '$(IOC)', -2.8E06, 2.8E06  , OTP$(CH) , OT$(CH)P, OT$(CH)W, OT$(CH)D, 1  , OUT$(CH), '$(SYS)' }
	  { "\$(DEV$(CH)=\$(DEV=TRIG:\$(LOCA):\$(UNIT)):$(CH)):",  5, "Channel $(CH)", 0 , 100, 10 , '$(LOCA)','$(UNIT)', '$(IOC)', -2.8E06, 2.8E06  , OTP$(CH) , OT$(CH)P, OT$(CH)W, OT$(CH)D, 1  , OUT$(CH), '$(SYS)' }
	  { "\$(DEV$(CH)=\$(DEV=TRIG:\$(LOCA):\$(UNIT)):$(CH)):",  6, "Channel $(CH)", 0 , 100, 10 , '$(LOCA)','$(UNIT)', '$(IOC)', -2.8E06, 2.8E06  , OTP$(CH) , OT$(CH)P, OT$(CH)W, OT$(CH)D, 1  , OUT$(CH), '$(SYS)' }
	  { "\$(DEV$(CH)=\$(DEV=TRIG:\$(LOCA):\$(UNIT)):$(CH)):",  7, "Channel $(CH)", 0 , 100, 10 , '$(LOCA)','$(UNIT)', '$(IOC)', -2.8E06, 2.8E06  , OTP$(CH) , OT$(CH)P, OT$(CH)W, OT$(CH)D, 1  , OUT$(CH), '$(SYS)' }
	  { "\$(DEV$(CH)=\$(DEV=TRIG:\$(LOCA):\$(UNIT)):$(CH)):",  8, "Channel $(CH)", 0 , 100, 10 , '$(LOCA)','$(UNIT)', '$(IOC)', -2.8E06, 2.8E06  , OTP$(CH) , OT$(CH)P, OT$(CH)W, OT$(CH)D, 1  , OUT$(CH), '$(SYS)' }
	  { "\$(DEV$(CH)=\$(DEV=TRIG:\$(LOCA):\$(UNIT)):$(CH)):",  9, "Channel $(CH)", 0 , 100, 10 , '$(LOCA)','$(UNIT)', '$(IOC)', -2.8E06, 2.8E06  , OTP$(CH) , OT$(CH)P, OT$(CH)W, OT$(CH)D, 1  , OUT$(CH), '$(SYS)' }
#	  { "\$(DEV$(CH)=\$(DEV=TRIG:\$(LOCA):\$(UNIT)):$(CH)):", 10, "Channel $(CH)", 0 , 100, 10 , '$(LOCA)','$(UNIT)', '$(IOC)', -2.8E06, 2.8E06  , OTPA     , OTAP    , OTAW    , OTAD    , 1  , OUTA    , '$(SYS)' }
#	  { "\$(DEV$(CH)=\$(DEV=TRIG:\$(LOCA):\$(UNIT)):$(CH)):", 11, "Channel $(CH)", 0 , 100, 10 , '$(LOCA)','$(UNIT)', '$(IOC)', -2.8E06, 2.8E06  , OTPB     , OTBP    , OTBW    , OTBD    , 1  , OUTB    , '$(SYS)' }
#	  { "\$(DEV$(CH)=\$(DEV=TRIG:\$(LOCA):\$(UNIT)):$(CH)):", 12, "Channel $(CH)", 0 , 100, 10 , '$(LOCA)','$(UNIT)', '$(IOC)', -2.8E06, 2.8E06  , OTPC     , OTCP    , OTCW    , OTCD    , 1  , OUTC    , '$(SYS)' }
#	  { "\$(DEV$(CH)=\$(DEV=TRIG:\$(LOCA):\$(UNIT)):$(CH)):", 13, "Channel $(CH)", 0 , 100, 10 , '$(LOCA)','$(UNIT)', '$(IOC)', -2.8E06, 2.8E06  , OTPD     , OTDP    , OTDW    , OTDD    , 1  , OUTD    , '$(SYS)' }
#	  { "\$(DEV$(CH)=\$(DEV=TRIG:\$(LOCA):\$(UNIT)):$(CH)):", 14, "Channel $(CH)", 0 , 100, 10 , '$(LOCA)','$(UNIT)', '$(IOC)', -2.8E06, 2.8E06  , OTPE     , OTEP    , OTEW    , OTED    , 1  , OUTE    , '$(SYS)' }
#	  { "\$(DEV$(CH)=\$(DEV=TRIG:\$(LOCA):\$(UNIT)):$(CH)):", 15, "Channel $(CH)", 0 , 100, 10 , '$(LOCA)','$(UNIT)', '$(IOC)', -2.8E06, 2.8E06  , OTPF     , OTFP    , OTFW    , OTFD    , 1  , OUTF    , '$(SYS)' }
}

